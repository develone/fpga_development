
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2015  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.5+449 (git sha1 840a6dc, clang 3.5.0-10+rpi1 -fPIC -Os)


-- Parsing `iceriver/catboard.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `iceriver/catboard.v' to AST representation.
Generating RTLIL representation for module `\catboard'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -blif iceriver/catboard.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: catboard            
Automatically selected catboard as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \catboard

2.2.3. Analyzing design hierarchy..
Top module:  \catboard
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\catboard.$proc$iceriver/catboard.v:74$14'.
     1/1: $0\a_data_reg[7:0]
Creating decoders for process `\catboard.$proc$iceriver/catboard.v:63$7'.
     1/1: $0\a_addr_reg[7:0]
Creating decoders for process `\catboard.$proc$iceriver/catboard.v:57$6'.
     1/2: $0\a_dstb_sr[2:0]
     2/2: $0\a_astb_sr[2:0]
Creating decoders for process `\catboard.$proc$iceriver/catboard.v:41$1'.
     1/2: $0\reset_dly_cnt[4:0]
     2/2: $0\reset[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\catboard.\a_data_reg' using process `\catboard.$proc$iceriver/catboard.v:74$14'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\catboard.\a_addr_reg' using process `\catboard.$proc$iceriver/catboard.v:63$7'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\catboard.\a_dstb_sr' using process `\catboard.$proc$iceriver/catboard.v:57$6'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\catboard.\a_astb_sr' using process `\catboard.$proc$iceriver/catboard.v:57$6'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\catboard.\reset' using process `\catboard.$proc$iceriver/catboard.v:41$1'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\catboard.\reset_dly_cnt' using process `\catboard.$proc$iceriver/catboard.v:41$1'.
  created $dff cell `$procdff$41' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\catboard.$proc$iceriver/catboard.v:74$14'.
Removing empty process `catboard.$proc$iceriver/catboard.v:74$14'.
Found and cleaned up 1 empty switch in `\catboard.$proc$iceriver/catboard.v:63$7'.
Removing empty process `catboard.$proc$iceriver/catboard.v:63$7'.
Removing empty process `catboard.$proc$iceriver/catboard.v:57$6'.
Found and cleaned up 3 empty switches in `\catboard.$proc$iceriver/catboard.v:41$1'.
Removing empty process `catboard.$proc$iceriver/catboard.v:41$1'.
Cleaned up 5 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing SYNTH pass.

2.6.1. Executing PROC pass (convert processes to netlists).

2.6.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.6.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.6.1.3. Executing PROC_INIT pass (extract init attributes).

2.6.1.4. Executing PROC_ARST pass (detect async resets in processes).

2.6.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.6.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.6.1.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.6.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.6.2. Executing OPT_CONST pass (perform const folding).

2.6.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..
  removing unused `$lt' cell `$lt$iceriver/catboard.v:42$2'.
  removing unused `$add' cell `$add$iceriver/catboard.v:43$3'.
  removing unused `$le' cell `$le$iceriver/catboard.v:44$4'.
  removing unused `$ge' cell `$ge$iceriver/catboard.v:47$5'.
  removing unused `$not' cell `$not$iceriver/catboard.v:64$8'.
  removing unused `$eq' cell `$eq$iceriver/catboard.v:64$9'.
  removing unused `$logic_and' cell `$logic_and$iceriver/catboard.v:64$10'.
  removing unused `$not' cell `$not$iceriver/catboard.v:75$15'.
  removing unused `$eq' cell `$eq$iceriver/catboard.v:75$16'.
  removing unused `$logic_and' cell `$logic_and$iceriver/catboard.v:75$17'.
  removing unused `$mux' cell `$procmux$19'.
  removing unused `$mux' cell `$procmux$22'.
  removing unused `$mux' cell `$procmux$25'.
  removing unused `$mux' cell `$procmux$29'.
  removing unused `$mux' cell `$procmux$32'.
  removing unused `$mux' cell `$procmux$34'.
  removing unused `$dff' cell `$procdff$36'.
  removing unused `$dff' cell `$procdff$37'.
  removing unused `$dff' cell `$procdff$38'.
  removing unused `$dff' cell `$procdff$39'.
  removing unused `$dff' cell `$procdff$40'.
  removing unused `$dff' cell `$procdff$41'.
  removing unused non-port wire \a_data_reg.
  removing unused non-port wire \reset_dly_cnt.
  removing unused non-port wire \a_addr_reg.
  removing unused non-port wire \a_astb_sr.
  removing unused non-port wire \a_dstb_sr.
  removing unused non-port wire \reset.
  removed 6 unused temporary wires.

2.6.4. Executing CHECK pass (checking for obvious problems).
checking module catboard..
found and reported 0 problems.

2.6.5. Executing OPT pass (performing simple optimizations).

2.6.5.1. Executing OPT_CONST pass (perform const folding).

2.6.5.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.6.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \catboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.6.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \catboard.
Performed a total of 0 changes.

2.6.5.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.6.5.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.6.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.6.5.8. Executing OPT_CONST pass (perform const folding).

2.6.5.9. Finished OPT passes. (There is nothing left to do.)

2.6.6. Executing WREDUCE pass (reducing word size of cells).

2.6.7. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module catboard:
  created 0 $alu and 0 $macc cells.

2.6.8. Executing SHARE pass (SAT-based resource sharing).

2.6.9. Executing OPT pass (performing simple optimizations).

2.6.9.1. Executing OPT_CONST pass (perform const folding).

2.6.9.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \catboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \catboard.
Performed a total of 0 changes.

2.6.9.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.6.9.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.6.9.8. Executing OPT_CONST pass (perform const folding).

2.6.9.9. Finished OPT passes. (There is nothing left to do.)

2.6.10. Executing FSM pass (extract and optimize FSM).

2.6.10.1. Executing FSM_DETECT pass (finding FSMs in design).

2.6.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.6.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.6.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.6.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.6.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.6.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.6.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.6.11. Executing OPT pass (performing simple optimizations).

2.6.11.1. Executing OPT_CONST pass (perform const folding).

2.6.11.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.6.11.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.6.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.6.11.5. Finished fast OPT passes.

2.6.12. Executing MEMORY pass.

2.6.12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.6.12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.6.12.3. Executing MEMORY_SHARE pass (consolidating $memrc/$memwr cells).

2.6.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.6.12.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.6.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.7. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.8. Executing TECHMAP pass (map to technology primitives).

2.8.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.
No more expansions possible.

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_CONST pass (perform const folding).

2.9.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.9.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.9.5. Finished fast OPT passes.

2.10. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_CONST pass (perform const folding).

2.11.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \catboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \catboard.
Performed a total of 0 changes.

2.11.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.11.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.11.8. Executing OPT_CONST pass (perform const folding).

2.11.9. Finished OPT passes. (There is nothing left to do.)

2.12. Executing TECHMAP pass (map to technology primitives).

2.12.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.12.2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.
Mapping catboard.$logic_not$iceriver/catboard.v:71$11 ($logic_not) with simplemap.
Mapping catboard.$logic_not$iceriver/catboard.v:71$12 ($logic_not) with simplemap.
Mapping catboard.$logic_or$iceriver/catboard.v:71$13 ($logic_or) with simplemap.
No more expansions possible.

2.13. Executing ICE40_OPT pass (performing simple optimizations).

2.13.1. Running ICE40 specific optimizations.

2.13.2. Executing OPT_CONST pass (perform const folding).

2.13.3. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.13.4. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.13.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.13.6. Finished OPT passes. (There is nothing left to do.)

2.14. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.15. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module catboard:

2.16. Executing TECHMAP pass (map to technology primitives).

2.16.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.
No more expansions possible.

2.17. Executing OPT_CONST pass (perform const folding).

2.18. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.19. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in catboard.

2.20. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in catboard.

2.21. Executing ICE40_OPT pass (performing simple optimizations).

2.21.1. Running ICE40 specific optimizations.

2.21.2. Executing OPT_CONST pass (perform const folding).

2.21.3. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\catboard'.
Removed a total of 0 cells.

2.21.4. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

2.21.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \catboard..

2.21.6. Finished OPT passes. (There is nothing left to do.)

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\catboard' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 1 outputs.

2.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + scorr 
ABC: Error: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.
Removed 0 unused cells and 5 unused wires.

2.23. Executing TECHMAP pass (map to technology primitives).

2.23.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.23.2. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'0111
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'0111'.

2.23.3. Continuing TECHMAP pass.
Mapping catboard.$abc$105$auto$blifparse.cc:343:parse_blif$106 using $paramod\$lut\WIDTH=2\LUT=4'0111.
No more expansions possible.
Removed 0 unused cells and 2 unused wires.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \catboard

2.24.2. Analyzing design hierarchy..
Top module:  \catboard
Removed 0 unused modules.

2.25. Printing statistics.

=== catboard ===

   Number of wires:                  7
   Number of wire bits:             20
   Number of public wires:           7
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_LUT4                         1

2.26. Executing CHECK pass (checking for obvious problems).
checking module catboard..
found and reported 0 problems.

2.27. Executing BLIF backend.

End of script. Logfile hash: c447a08764
CPU: user 2.48s system 0.08s, MEM: 12.34 MB total, 7.94 MB resident
Yosys 0.5+449 (git sha1 840a6dc, clang 3.5.0-10+rpi1 -fPIC -Os)
Time spent: 62% 8x read_verilog (1 sec), 14% 1x share (0 sec), ...
seed: 1
device: 8k
read_chipdb +/share/arachne-pnr/chipdb-8k.bin...
  supported packages: cb132, cb132:4k, cm121, cm121:4k, cm225, cm225:4k, cm81, cm81:4k, ct256, tq144:4k
read_blif iceriver/catboard.blif...
prune...
read_pcf iceriver/catboard.pcf...
instantiate_io...
pack...

After packing:
IOs          20 / 206
GBs          0 / 8
  GB_IOs     0 / 8
LCs          1 / 7680
  DFF        0
  CARRY      0
  CARRY, DFF 0
  DFF PASS   0
  CARRY PASS 0
BRAMs        0 / 32
WARMBOOTs    0 / 1
PLLs         0 / 2

place_constraints...
promote_globals...
  promoted 0 nets
  0 globals
realize_constants...
place...
  initial wire length = 72
  final wire length = 14
cell = 139

After placement:
PIOs       18 / 206
PLBs       1 / 960
BRAMs      0 / 32

  place time 0.02s
route...
  pass 1, 0 shared.

After routing:
span_4     4 / 29696
span_12    0 / 5632

  route time 0.99s
write_txt iceriver/catboard.txt...
